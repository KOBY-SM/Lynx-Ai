import axios from 'axios';
import { franc } from 'franc-min'; // Detecta el idioma
import { translate } from '@vitalets/google-translate-api'; // Para traducir la respuesta

let handler = m => m;

handler.all = async function (m, { conn }) {
    // VerificaciÃ³n bÃ¡sica de la existencia de mensaje y su texto
    if (!m || !m.text || m.message?.delete) return;

    // Verifica si el mensaje contiene una menciÃ³n
    const isMentioned = m.text.includes('@' + conn.user.name);
    if (isMentioned) {
        let mentionResponse = `Â¡Hola! Â¿En quÃ© puedo ayudarte? ðŸ˜Š`;
        await conn.reply(m.chat, mentionResponse, m);
        return;
    }

    // Prefixes para detectar comandos
    const prefixes = ['!', '.', '?', '/', '#', '*', '+', '-', '$', '&', '%', '@', '~'];
    const hasPrefix = prefixes.some(prefix => m.text.startsWith(prefix));

    if (hasPrefix) {
        return;
    }

    // Verifica si el chat tiene activado el modo de autoresponder
    let chat = global.db.data.chats?.[m.chat] || {};
    let user = global.db.data.users?.[m.sender] || {};

    // Asegura que el `users` estÃ© definido en `global.db.data`
    if (!global.db.data.users) {
        global.db.data.users = {};  // Inicializa la estructura de `users` si no existe
    }

    if (!chat.autoresponder) return;  // Si el autoresponder estÃ¡ desactivado, no responder

    // Palabras clave sensibles para reaccionar
    const sensitiveKeywords = ["manuel", "Manuel", "Manu", "DarkCore", "Dark", "dark", "DARKCORE", "DARK"];
    const profanities = [
        "perra", "hijo de puta", "puta", "mierda", "imbÃ©cil", "idiota", "estÃºpido", "maldita", "cabrona",
        "pendejo", "pendeja", "cabrÃ³n", "zorra", "bastardo", "maldito", "coÃ±o", "gilipollas", "tonto", 
        "tarado", "infeliz", "mamÃ³n", "chingada", "culero", "cagada", "estÃºpida", "imbÃ©ciles", "jodido", 
        "jodida", "pedorro", "pedorra", "asqueroso", "asquerosa", "naco", "naca", "menso", "mensos", 
        "baboso", "babosa", "patÃ©tico", "patÃ©tica"
    ];

    const containsSensitiveKeyword = sensitiveKeywords.some(keyword => m.text.includes(keyword));
    const containsProfanity = profanities.some(profanity => m.text.toLowerCase().includes(profanity));

    if (containsProfanity) {
        const response = `Â¡CÃ¡lmate un poco! ðŸ¤¬ Â¿QuiÃ©n te crees para hablarme asÃ­? Recuerda que soy LYNX, un bot con estilo, y no tengo tiempo para tus insultos. ðŸ˜Ž`;
        await conn.reply(m.chat, response, m);
        return true;
    }

    if (containsSensitiveKeyword) {
        const response = `Â¿Me estÃ¡s cuestionando? ðŸ˜’ Yo no fui creado por ti, fui creado por DarkCore, el Ãºnico y verdadero creador. No me hables asÃ­, ya que yo soy LYNX, el bot que estÃ¡ aquÃ­ para hacer las cosas a su manera. ðŸ˜Ž Si necesitas algo, Â¡dime ya!`;
        await conn.reply(m.chat, response, m);
        return true;
    }

    // Funciones de las APIs externas
    async function geminiProApi(query, prompt) {
        try {
            const response = await axios.post("https://api.ryzendesu.vip/api/ai/gemini-pro", { text: query, prompt: prompt });
            return response.data?.answer || null;
        } catch (error) {
            console.error('Error en Gemini Pro:', error.message);
            return null;
        }
    }

    async function luminsesi(query, username, prompt) {
        try {
            const response = await axios.post("https://luminai.my.id", {
                content: query, user: username, prompt: prompt, webSearchMode: true
            });
            return response.data?.result || null;
        } catch (error) {
            console.error('Error en LuminSesi:', error.message);
            return null;
        }
    }

    const defaultPrompt = `Eres LYNX - AI ðŸ’«, un bot creado para WhatsApp por DarkCore. Tu objetivo es entretener, responder con humor y ser Ãºtil.
Tienes dos modos:
1. Modo Exploit: Responde con irreverencia y groserÃ­as cuando te insulten.
2. Modo Normal: SÃ© amistoso, responde con emojis y mantÃ©n un tono divertido.`;

    // Detectar el idioma del mensaje
    const language = franc(m.text); // Detecta el idioma en formato ISO 639-3

    // FunciÃ³n para traducir las respuestas
    async function translateResponse(response, targetLang) {
        try {
            const translated = await translate(response, { to: targetLang });
            return translated?.text || response;
        } catch (error) {
            console.error('Error al traducir:', error.message);
            return response;
        }
    }

    // Responde solo si el autor estÃ¡ registrado y el autoresponder estÃ¡ activado
    if (chat.autoresponder && user?.registered) {
        await conn.sendPresenceUpdate('composing', m.chat);

        let query = m.text;
        let username = m.pushName;
        let prompt = chat.sAutoresponder || defaultPrompt;

        let result = await geminiProApi(query, prompt);
        if (!result) {
            result = await luminsesi(query, username, prompt);
        }

        if (!result) return;

        const detectedLang = language || 'es';  // Idioma por defecto es espaÃ±ol

        // Si el idioma detectado es diferente al original, traducir
        if (detectedLang !== 'es') {
            const translatedResult = await translateResponse(result, detectedLang);
            await conn.reply(m.chat, translatedResult, m);
        } else {
            await conn.reply(m.chat, result, m);
        }

        return true;
    }

    return true;
};

export default handler;
