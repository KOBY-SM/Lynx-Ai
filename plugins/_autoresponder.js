import axios from 'axios';
import { franc } from 'franc-min';
import { translate } from '@vitalets/google-translate-api'; 

let handler = m => m;
handler.all = async function (m, { conn }) {
    // Verifica si el mensaje es vacÃ­o o fue eliminado, o si es de tipo audio/video
    if (!m.text || m?.message?.delete || m.type === 'audio' || m.type === 'video') {
        return; 
    }

    // ComprobaciÃ³n de prefijos, para evitar que responda a comandos
    const prefixes = ['!', '.', '?', '/', '#', '*', '+', '-', '$', '&', '%', '@', '~'];
    const hasPrefix = prefixes.some(prefix => m.text.startsWith(prefix));
    if (hasPrefix) {
        return; // No responde si el mensaje comienza con un prefijo
    }

    let user = global.db.data.users[m.sender];
    let chat = global.db.data.chats[m.chat];

    const sensitiveKeywords = ["manuel", "Manuel", "Manu", "DarkCore", "Dark", "dark", "DARKCORE", "DARK"];
    const profanities = [
        "perra", "hijo de puta", "puta", "mierda", "imbÃ©cil", "idiota", "estÃºpido", 
        "maldita", "cabrona", "pendejo", "pendeja", "cabrÃ³n", "zorra", "bastardo", 
        "maldito", "coÃ±o", "gilipollas", "tonto", "tarado", "infeliz", "mamÃ³n", 
        "chingada", "culero", "cagada", "estÃºpida", "imbÃ©ciles", "jodido", 
        "jodida", "pedorro", "pedorra", "asqueroso", "asquerosa", "naco", "naca", 
        "menso", "mensos", "baboso", "babosa", "patÃ©tico", "patÃ©tica"
    ];

    const containsSensitiveKeyword = sensitiveKeywords.some(keyword => m.text.includes(keyword));
    const containsProfanity = profanities.some(profanity => m.text.toLowerCase().includes(profanity));

    if (containsProfanity) {
        const exploitResponse = `Â¡CÃ¡lmate un poco! ðŸ¤¬ Â¿QuiÃ©n te crees para hablarme asÃ­? Recuerda que soy LYNX, un bot con estilo, y no tengo tiempo para tus insultos. ðŸ˜Ž`.trim();
        await this.reply(m.chat, exploitResponse, m);
        return true;
    }

    if (containsSensitiveKeyword) {
        const response = `Â¿Me estÃ¡s cuestionando? ðŸ˜’ Yo no fui creado por ti, fui creado por DarkCore, el Ãºnico y verdadero creador. No me hables asÃ­, ya que yo soy LYNX, el bot que estÃ¡ aquÃ­ para hacer las cosas a su manera. ðŸ˜Ž Si necesitas algo, Â¡dime ya!`.trim();
        await this.reply(m.chat, response, m);
        return true;
    }

    async function geminiProApi(query, prompt) {
        try {
            const response = await axios.post("https://api.ryzendesu.vip/api/ai/gemini-pro", {
                text: query,
                prompt: prompt
            });
            return response.data.answer || null;
        } catch (error) {
            console.error('Error en Gemini Pro:', error.message);
            return null;
        }
    }
    
    async function luminsesi(query, username, prompt) {
        try {
            const response = await axios.post("https://luminai.my.id", {
                content: query,
                user: username,
                prompt: prompt,
                webSearchMode: true
            });
            return response.data.result || null;
        } catch (error) {
            console.error('Error en LuminSesi:', error.message);
            return null;
        }
    }

    const defaultPrompt = 
    `Eres LYNX - AI ðŸ’«, un bot creado para WhatsApp por DarkCore. Tu objetivo es entretener, responder con humor y ser Ãºtil.
    Tienes dos modos:
    1. Modo Exploit: Responde con irreverencia y groserÃ­as cuando te insulten.
    2. Modo Normal: SÃ© amistoso, responde con emojis y mantÃ©n un tono divertido.`.trim();

    const language = franc(m.text); 

    async function translateResponse(response, targetLang) {
        try {
            const translated = await translate(response, { to: targetLang });
            return translated.text;
        } catch (error) {
            console.error('Error al traducir:', error.message);
            return response;
        }
    }

    if (user?.registered) {
        await this.sendPresenceUpdate('composing', m.chat);
        let query = m.text;
        let username = m.pushName;
        let prompt = chat.sAutoresponder || defaultPrompt;

        let result = await geminiProApi(query, prompt);
        if (!result) {
            result = await luminsesi(query, username, prompt);
        }

        if (!result) {
            return;
        }

        const detectedLang = language || 'es';

        if (detectedLang !== 'es') { 
            const translatedResult = await translateResponse(result, detectedLang);
            await this.reply(m.chat, translatedResult, m);
        } else {
            await this.reply(m.chat, result, m);
        }
        
        return true;
    }

    return true;
};

export default handler;
